<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NHibernate.Linq</name>
    </assembly>
    <members>
        <member name="T:NHibernate.Linq.Expressions.NHibernateExpressionType">
            <summary>
            Extended node types for custom expressions
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Expressions.SqlFunctionAttribute">
            <summary>
            Associates a method with a corresponding SQL function.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.Expressions.SqlFunctionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Linq.Expressions.SqlFunctionAttribute"/> class.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.Expressions.SqlFunctionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Linq.Expressions.SqlFunctionAttribute"/> class.
            </summary>
            <param name="owner">The name of the schema that owns the SQL function.</param>
        </member>
        <member name="P:NHibernate.Linq.Expressions.SqlFunctionAttribute.Owner">
            <summary>
            Gets or sets the name of the schema that owns the SQL function.
            </summary>
        </member>
        <member name="P:NHibernate.Linq.Expressions.SqlFunctionAttribute.PropertyPosition">
            <summary>
            Gets or sets the position of the function parameter that accepts the property name.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.SqlClient.SqlClientExtensions">
            <summary>
            Provides static methods that represent functionality provided by MS SQL Server.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Day(NHibernate.Linq.IDbMethods,System.DateTime)">
            <summary>
            Returns an integer representing the day datepart of the specified date.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Day(NHibernate.Linq.IDbMethods,System.Nullable{System.DateTime})">
            <summary>
            Returns an integer representing the day datepart of the specified date.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Month(NHibernate.Linq.IDbMethods,System.DateTime)">
            <summary>
            Returns an integer that represents the month part of a specified date.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Month(NHibernate.Linq.IDbMethods,System.Nullable{System.DateTime})">
            <summary>
            Returns an integer that represents the month part of a specified date.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Year(NHibernate.Linq.IDbMethods,System.DateTime)">
            <summary>
            Returns an integer that represents the year part of a specified date.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Year(NHibernate.Linq.IDbMethods,System.Nullable{System.DateTime})">
            <summary>
            Returns an integer that represents the year part of a specified date.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Ascii(NHibernate.Linq.IDbMethods,System.String)">
            <summary>
            Returns the ASCII code value of the leftmost character of a character expression.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Ascii(NHibernate.Linq.IDbMethods,System.Char)">
            <summary>
            Returns the ASCII code value of the leftmost character of a character expression.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Ascii(NHibernate.Linq.IDbMethods,System.Nullable{System.Char})">
            <summary>
            Returns the ASCII code value of the leftmost character of a character expression.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Char(NHibernate.Linq.IDbMethods,System.Int32)">
            <summary>
            Converts an int ASCII code to a character.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Char(NHibernate.Linq.IDbMethods,System.Nullable{System.Int32})">
            <summary>
            Converts an int ASCII code to a character.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.CharIndex(NHibernate.Linq.IDbMethods,System.String,System.Char)">
            <summary>
            Returns the starting position of the specified expression in a character string.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.CharIndex(NHibernate.Linq.IDbMethods,System.String,System.Char,System.Int32)">
            <summary>
            Returns the starting position of the specified expression in a character string.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="search"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.CharIndex(NHibernate.Linq.IDbMethods,System.String,System.String)">
            <summary>
            Returns the starting position of the specified expression in a character string.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.CharIndex(NHibernate.Linq.IDbMethods,System.String,System.String,System.Int32)">
            <summary>
            Returns the starting position of the specified expression in a character string.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="search"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Left(NHibernate.Linq.IDbMethods,System.String,System.Int32)">
            <summary>
            Returns the left part of a character string with the specified number of characters.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Len(NHibernate.Linq.IDbMethods,System.String)">
            <summary>
            Returns the number of characters of the specified string expression, excluding trailing blanks.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Lower(NHibernate.Linq.IDbMethods,System.String)">
            <summary>
            Returns a character expression after converting uppercase character data to lowercase.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.LTrim(NHibernate.Linq.IDbMethods,System.String)">
            <summary>
            Returns a character expression after it removes leading blanks.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Replace(NHibernate.Linq.IDbMethods,System.String,System.String,System.String)">
            <summary>
            Replaces all occurrences of a specified string value with another string value.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Replicate(NHibernate.Linq.IDbMethods,System.String,System.Int32)">
            <summary>
            Repeats a string value a specified number of times.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Reverse(NHibernate.Linq.IDbMethods,System.String)">
            <summary>
            Returns the reverse of a character expression.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Right(NHibernate.Linq.IDbMethods,System.String,System.Int32)">
            <summary>
            Returns the right part of a character string with the specified number of characters.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.RTrim(NHibernate.Linq.IDbMethods,System.String)">
            <summary>
            Returns a character string after truncating all trailing blanks.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Substring(NHibernate.Linq.IDbMethods,System.String,System.Int32,System.Int32)">
            <summary>
            Returns part of a character, binary, text, or image expression.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.SqlClient.SqlClientExtensions.Upper(NHibernate.Linq.IDbMethods,System.String)">
            <summary>
            Returns a character expression with lowercase character data converted to uppercase.
            </summary>
            <param name="methods"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Linq.Transform.LinqGroupingResultTransformer">
            <summary>
            Transforms critieria query results into a collection of grouped objects.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.Transform.LinqGroupingResultTransformer.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Linq.LinqGroupingResultTransformer"/> class.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> representing the type of collection to transform.</param>
            <param name="propertyName">The name of the property to be used as a key for the purpose of grouping.</param>
        </member>
        <member name="M:NHibernate.Linq.Transform.LinqGroupingResultTransformer.TransformList(System.Collections.IList)">
            <summary>
            Transforms the query result collection.
            </summary>
            <param name="collection">An <see cref="T:System.Collections.IList"/> of objects.</param>
            <returns>A transformed <see cref="T:System.Collections.IList"/> object.</returns>
        </member>
        <member name="M:NHibernate.Linq.Transform.LinqGroupingResultTransformer.TransformTuple(System.Object[],System.String[])">
            <summary>
            Transforms each query result.
            </summary>
            <param name="tuple">An <see cref="T:System.Object"/> array of query result values.</param>
            <param name="aliases">A <see cref="T:System.String"/> array of column aliases.</param>
            <returns>An <see cref="T:System.Object"/> initialized with the values from the specified tuple.</returns>
        </member>
        <member name="T:NHibernate.Linq.Transform.IGrouping">
            <summary>
            Provides a method for adding individual objects to a collection of grouped objects.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.Transform.IGrouping.Add(System.Object)">
            <summary>
            Adds an object to the current group.
            </summary>
            <param name="item">The <see cref="T:System.Object"/> to add.</param>
        </member>
        <member name="T:NHibernate.Linq.Transform.Grouping`2">
            <summary>
            Represents a collection of objects that have a common key.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:NHibernate.Linq.Transform.Grouping`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Linq.Grouping"/> class.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:NHibernate.Linq.Transform.Grouping`2.Add(System.Object)">
            <summary>
            Adds an object to the current group.
            </summary>
            <param name="item">The <see cref="T:System.Object"/> to add.</param>
        </member>
        <member name="M:NHibernate.Linq.Transform.Grouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:NHibernate.Linq.Transform.Grouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:NHibernate.Linq.Transform.Grouping`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="P:NHibernate.Linq.Transform.Grouping`2.Key">
            <summary>
            Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
        </member>
        <member name="M:NHibernate.Transform.TypeSafeConstructorMemberInitResultTransformer.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the value of the field or property represented by the specified
            <see cref="T:System.Reflection.MemberInfo"/> for the supplied object instance.
            </summary>
            <param name="memberInfo">A <see cref="T:System.Reflection.MemberInfo"/> object.</param>
            <param name="instance">An instance of an object.</param>
            <param name="valueToSet">The value to set on the specified object.</param>
        </member>
        <member name="T:NHibernate.Linq.Util.LinqUtil">
            <summary>
            Provides static utility methods that aid in evaluating expression trees.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.Util.LinqUtil.Iterate``1(System.Func{``0,``0},``0)">
            <summary>
            Creates a collection of type T by invoking a delegate method during
            enumeration that return each item, begining with an initialValue.
            </summary>
            <typeparam name="T">The type of collection being created.</typeparam>
            <param name="func">A delegate method to invoke.</param>
            <param name="initialValue">The first item in the collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type T.</returns>
        </member>
        <member name="M:NHibernate.Linq.Util.LinqUtil.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an <see cref="T:System.Object"/> with the specified <see cref="T:System.Type"/>
            and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An <see cref="T:System.Object"/> that implements the <see cref="T:System.IConvertible"/> interface.</param>
            <param name="conversionType">A <see cref="T:System.Type"/>.</param>
            <returns>An object whose <see cref="T:System.Type"/> is conversionType and whose value is equivalent
            to value, or null, if value is null and conversionType is not a value type.</returns>
        </member>
        <member name="M:NHibernate.Linq.Util.LinqUtil.IsNullableType(System.Type)">
            <summary>
            Determines if the specified type is a <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> to check.</param>
            <returns>True if the type is a <see cref="T:System.Nullable`1"/> type, otherwise false.</returns>
        </member>
        <member name="M:NHibernate.Linq.Util.LinqUtil.IsAnonymousType(System.Type)">
            <summary>
            Determines if the specified type is an anonymous type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:NHibernate.Linq.Util.LinqUtil.SqlEncode(System.Object)">
            <summary>
            Encodes an <see cref="T:System.Object"/> for use in SQL statements.
            </summary>
            <param name="value">The value to encode.</param>
            <returns>A SQL encoded value.</returns>
        </member>
        <member name="T:NHibernate.Linq.Util.TypeSystem">
            <remarks>
            http://blogs.msdn.com/mattwar/archive/2007/07/30/linq-building-an-iqueryable-provider-part-i.aspx
            </remarks>
        </member>
        <member name="T:NHibernate.Linq.Visitors.AssociationVisitor">
            <summary>
            Preprocesses an expression tree replacing MemberAccessExpressions and ParameterExpressions with
            NHibernate-specific PropertyAccessExpressions and EntityExpressions respectively.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.ExpressionVisitor">
            <summary>
            Provides virtual methods that can be used by subclasses to parse an expression tree.
            </summary>
            <remarks>
            This class actually already exists in the System.Core assembly...as an internal class.
            I can only speculate as to why it is internal, but it is obviously much too dangerous
            for anyone outside of Microsoft to be using...
            </remarks>
        </member>
        <member name="T:NHibernate.Linq.Visitors.BinaryBooleanReducer">
            <summary>
            Preprocesses an expression tree replacing binary boolean expressions with unary expressions.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.ComparePropToProp">
            <summary>
            Represents a method that returns an <see cref="T:NHibernate.Criterion.ICriterion"/>
            object that compares one property to another property using a binary expression.
            </summary>
            <param name="propertyName">The name of the property to compare on the left hand side of the expression.</param>
            <param name="otherPropertyName">The name of the property to compare on the right hand side of the expression.</param>
            <returns>An initialized <see cref="T:NHibernate.Criterion.ICriterion"/> object.</returns>
        </member>
        <member name="T:NHibernate.Linq.Visitors.ComparePropToValue">
            <summary>
            Represents a method that returns an <see cref="T:NHibernate.Criterion.ICriterion"/>
            object that compares a property to a constant value using a binary expression.
            </summary>
            <param name="propertyName">The name of the property to compare on the left hand side of the expression.</param>
            <param name="value">The constant value used for the right hand side of the expression.</param>
            <returns>An initialized <see cref="T:NHibernate.Criterion.ICriterion"/> object.</returns>
        </member>
        <member name="T:NHibernate.Linq.Visitors.CompareValueToCriteria">
            <summary>
            Represents a method that returns an <see cref="T:NHibernate.Criterion.ICriterion"/>
            object that compares a value to a criteria using a binary expression.
            </summary>
            <param name="value">The value on the left hand side of the expression.</param>
            <param name="criteria">The <see cref="T:NHibernate.Criterion.DetachedCriteria"/> used for the right hand side of the expression.</param>
            <returns>An initialized <see cref="T:NHibernate.Criterion.ICriterion"/> object.</returns>
        </member>
        <member name="T:NHibernate.Linq.Visitors.ComparePropToCriteria">
            <summary>
            Represents a method that returns an <see cref="T:NHibernate.Criterion.ICriterion"/>
            object that compares a property to a criteria using a binary expression.
            </summary>
            <param name="propertyName">The name of the property to compare on the left hand side of the expression.</param>
            <param name="criteria">The <see cref="T:NHibernate.Criterion.DetachedCriteria"/> used for the right hand side of the expression.</param>
            <returns>An initialized <see cref="T:NHibernate.Criterion.ICriterion"/> object.</returns>
        </member>
        <member name="T:NHibernate.Linq.Visitors.BinaryCriterionVisitor">
            <summary>
            Visits a BinaryExpression providing the appropriate NHibernate ICriterion.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.NHibernateExpressionVisitor">
            <summary>
            NHibernate-specific base expression visitor.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.BinaryExpressionOrderer">
            <summary>
            Preprocesses an expression tree ordering binary expressions in accordance with the <see cref="T:NHibernate.Linq.Visitors.BinaryCriterionVisitor"/>.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.CollectionAliasVisitor">
            <summary>
            Assigns the appropriate aliases to a collection access.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.EntityExpressionVisitor">
            <summary>
            Retrieves the first (or root) instance of EntityExpression found in the given Expression.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NHibernate.Linq.Visitors.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:NHibernate.Linq.Visitors.Evaluator.PartialEval(System.Linq.Expressions.Expression)" -->
        <!-- Badly formed XML comment ignored for member "T:NHibernate.Linq.Visitors.Evaluator.SubtreeEvaluator" -->
        <member name="T:NHibernate.Linq.Visitors.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.GroupingArgumentsVisitor">
            <summary>
            Visits an expression tree providing the appropriate projections for grouping arguments.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.ImmediateResultsVisitor`1">
            <summary>
            Visits any expression calls that require immediate results.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.MemberNameVisitor">
            <summary>
            Visits an expression providing the member name being accessed based on the EntityExpressions and
            PropertyAccessExpressions in the expression tree. Any entity associations encountered are added
            as subcriteria to the query.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.NHibernateQueryTranslator">
            <summary>
            Translates a Linq Expression into an NHibernate ICriteria object.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.PropertyToMethodVisitor">
            <summary>
            Converts calls to an IEnumerable.Count property to IEnumerable.Count() extension method.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.RootVisitor">
            <summary>
            Translates a Linq Expression into an NHibernate ICriteria object.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.SelectArgumentsVisitor">
            <summary>
            Provides the appropriate NHibernate selection projections and/or IResultTransformers
            based on a given expression tree.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.SelectManyVisitor">
            <summary>
            Adds the appropriate subcriteria to the query based on a SelectMany expression tree.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Visitors.WhereArgumentsVisitor">
            <summary>
            Provides ICriterion for a query given a Linq expression tree.
            </summary>
        </member>
        <member name="P:NHibernate.Linq.Visitors.WhereArgumentsVisitor.CurrentCriterions">
            <summary>
            Gets the current collection of <see cref="T:NHibernate.Criterion.ICriterion"/> objects.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.CriteriaResultReader`1">
            <summary>
            Wraps an ICriteria object providing results when necessary.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NHibernate.Linq.IDbMethods">
            <summary>
            Marker interface used to conditionally include database provider specific methods.
            </summary>
        </member>
        <member name="T:NHibernate.Linq.NHibernateContext">
            <summary>
            Wraps an <see cref="T:NHibernate.ISession"/> object to provide base functionality
            for custom, database-specific context classes.
            </summary>
        </member>
        <member name="F:NHibernate.Linq.NHibernateContext.Methods">
            <summary>
            Provides access to database provider specific methods.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Linq.NHibernateContext"/> class.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.#ctor(NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Linq.NHibernateContext"/> class.
            </summary>
            <param name="session">An initialized <see cref="T:NHibernate.ISession"/> object.</param>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.ProvideSession">
            <summary>
            Allows for empty construction but provides an interface for an interface to have the derived 
            classes provide a session object late in the cycle. 
            </summary>
            <returns>The Required <see cref="T:NHibernate.ISession"/> object.</returns>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.Dispose">
            <summary>
            Disposes the wrapped <see cref="T:NHibernate.ISession"/> object.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#AddReferenceToCollection(System.Object,System.String,System.Object)">
            <summary>
            Adds the reference to collection.
            </summary>
            <param name="targetResource">The target resource.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="resourceToBeAdded">The resource to be added.</param>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#ClearChanges">
            <summary>
            Clears the changes.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#CreateResource(System.String,System.String)">
            <summary>
            Creates the resource.
            </summary>
            <param name="containerName">Name of the container.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <returns>Newly created Resource</returns>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#DeleteResource(System.Object)">
            <summary>
            Deletes the resource.
            </summary>
            <param name="targetResource">The target resource.</param>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#GetResource(System.Linq.IQueryable,System.String)">
            <summary>
            Gets the resource.
            </summary>
            <param name="query">The query.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#GetValue(System.Object,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="targetResource">The target resource.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#RemoveReferenceFromCollection(System.Object,System.String,System.Object)">
            <summary>
            Removes the reference from collection.
            </summary>
            <param name="targetResource">The target resource.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="resourceToBeRemoved">The resource to be removed.</param>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#ResetResource(System.Object)">
            <summary>
            Replaces the resource.
            </summary>
            <param name="resource">The resource to reset.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#ResolveResource(System.Object)">
            <summary>
            Resolves the resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#SaveChanges">
            <summary>
            Saves the changes.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#SetReference(System.Object,System.String,System.Object)">
            <summary>
            Sets the reference.
            </summary>
            <param name="targetResource">The target resource.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="M:NHibernate.Linq.NHibernateContext.System#Data#Services#IUpdatable#SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="targetResource">The target resource.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="P:NHibernate.Linq.NHibernateContext.Session">
            <summary>
            Gets a reference to the <see cref="T:NHibernate.ISession"/> associated with this object.
            </summary>
        </member>
        <member name="P:NHibernate.Linq.NHibernateContext.UpdateCache">
            <summary>
            Gets the update cache.
            </summary>
            <value>The update cache.</value>
        </member>
        <member name="T:NHibernate.Linq.NHibernateExtensions">
            <summary>
            Provides a static method that enables LINQ syntax for NHibernate Criteria Queries.
            </summary>
        </member>
        <member name="M:NHibernate.Linq.NHibernateExtensions.Linq``1(NHibernate.ISession)">
            <summary>
            Creates a new <see cref="T:NHibernate.Linq.NHibernateQueryProvider"/> object used to evaluate an expression tree.
            </summary>
            <typeparam name="T">An NHibernate entity type.</typeparam>
            <param name="session">An initialized <see cref="T:NHibernate.ISession"/> object.</param>
            <returns>An <see cref="T:NHibernate.Linq.NHibernateQueryProvider"/> used to evaluate an expression tree.</returns>
        </member>
        <member name="T:NHibernate.Linq.QueryProvider">
            <summary>
            Generic IQueryProvider base class. See http://blogs.msdn.com/mattwar/archive/2007/07/30/linq-building-an-iqueryable-provider-part-i.aspx
            </summary>
        </member>
        <member name="T:NHibernate.Linq.Query`1">
            <summary>
             Generic IQueryable base class. See http://blogs.msdn.com/mattwar/archive/2007/07/30/linq-building-an-iqueryable-provider-part-i.aspx
             </summary>
        </member>
        <member name="T:NHibernate.Linq.QueryOptions">
            <summary>
            It provides methods for caching the results, and some extension methods for them.
            </summary>
        </member>
    </members>
</doc>
